// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SynergyLauncherCore;
//
//    var minecraftServerInfo = MinecraftServerInfo.FromJson(jsonString);

using System.Net.Http.Headers;

namespace SynergyLauncherCore
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MinecraftServerInfo
    {
        [JsonProperty("online")]
        public bool Online { get; set; }

        [JsonProperty("host")]
        public string Host { get; set; }

        [JsonProperty("port")]
        public long Port { get; set; }

        [JsonProperty("ip_address")]
        public string IpAddress { get; set; }

        [JsonProperty("eula_blocked")]
        public bool EulaBlocked { get; set; }

        [JsonProperty("retrieved_at")]
        public long RetrievedAt { get; set; }

        [JsonProperty("expires_at")]
        public long ExpiresAt { get; set; }

        [JsonProperty("srv_record")]
        public object SrvRecord { get; set; }

        [JsonProperty("version")]
        public Version Version { get; set; }

        [JsonProperty("players")]
        public Players Players { get; set; }

        [JsonProperty("motd")]
        public Motd Motd { get; set; }

        [JsonProperty("icon")]
        public string Icon { get; set; }

        [JsonProperty("mods")]
        public object[] Mods { get; set; }

        [JsonProperty("software")]
        public object Software { get; set; }

        [JsonProperty("plugins")]
        public object[] Plugins { get; set; }
    }

    public partial class Motd
    {
        [JsonProperty("raw")]
        public string Raw { get; set; }

        [JsonProperty("clean")]
        public string Clean { get; set; }

        [JsonProperty("html")]
        public string Html { get; set; }
    }

    public partial class Players
    {
        [JsonProperty("online")]
        public long Online { get; set; }

        [JsonProperty("max")]
        public long Max { get; set; }

        [JsonProperty("list")]
        public Version[] List { get; set; }
    }

    public partial class Version
    {
        [JsonProperty("uuid", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? Uuid { get; set; }

        [JsonProperty("name_raw")]
        public string NameRaw { get; set; }

        [JsonProperty("name_clean")]
        public string NameClean { get; set; }

        [JsonProperty("name_html")]
        public string NameHtml { get; set; }

        [JsonProperty("protocol", NullValueHandling = NullValueHandling.Ignore)]
        public long? Protocol { get; set; }
    }

    public partial class MinecraftServerInfo
    {
        public static MinecraftServerInfo FromJson(string json) => JsonConvert.DeserializeObject<MinecraftServerInfo>(json, SynergyLauncherCore.Converter.Settings);

        public async static Task<MinecraftServerInfo> FromServerAddress(string serverAdress)
        {
            const string url = "https://api.mcstatus.io/v2/status/java/";
            
            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri(url + serverAdress);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            HttpResponseMessage response = await client.GetAsync(string.Empty).ConfigureAwait(false);

            response.EnsureSuccessStatusCode();
            
            var jsonString = await response.Content.ReadAsStringAsync();
            return FromJson(jsonString);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this MinecraftServerInfo self) => JsonConvert.SerializeObject(self, SynergyLauncherCore.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
